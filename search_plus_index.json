{"./":{"url":"./","title":"简介","keywords":"","body":" go-zero 0. go-zero 介绍 go-zero 是一个集成了各种工程实践的 web 和 rpc 框架。通过弹性设计保障了大并发服务端的稳定性，经受了充分的实战检验。 go-zero 包含极简的 API 定义和生成工具 goctl，可以根据定义的 api 文件一键生成 Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript 代码，并可直接运行。 使用 go-zero 的好处： 轻松获得支撑千万日活服务的稳定性 内建级联超时控制、限流、自适应熔断、自适应降载等微服务治理能力，无需配置和额外代码 微服务治理中间件可无缝集成到其它现有框架使用 极简的 API 描述，一键生成各端代码 自动校验客户端请求参数合法性 大量微服务治理和并发工具包 1. go-zero 框架背景 18 年初，我们决定从 Java+MongoDB 的单体架构迁移到微服务架构，经过仔细思考和对比，我们决定： 基于 Go 语言 高效的性能 简洁的语法 广泛验证的工程效率 极致的部署体验 极低的服务端资源成本 自研微服务框架 有过很多微服务框架自研经验 需要有更快速的问题定位能力 更便捷的增加新特性 2. go-zero 框架设计思考 对于微服务框架的设计，我们期望保障微服务稳定性的同时，也要特别注重研发效率。所以设计之初，我们就有如下一些准则： 保持简单，第一原则 弹性设计，面向故障编程 工具大于约定和文档 高可用 高并发 易扩展 对业务开发友好，封装复杂度 约束做一件事只有一种方式 我们经历不到半年时间，彻底完成了从 Java+MongoDB 到 Golang+MySQL 为主的微服务体系迁移，并于 18 年 8 月底完全上线，稳定保障了业务后续迅速增长，确保了整个服务的高可用。 3. go-zero 项目实现和特点 go-zero 是一个集成了各种工程实践的包含 web 和 rpc 框架，有如下主要特点： 强大的工具支持，尽可能少的代码编写 极简的接口 完全兼容 net/http 支持中间件，方便扩展 高性能 面向故障编程，弹性设计 内建服务发现、负载均衡 内建限流、熔断、降载，且自动触发，自动恢复 API 参数自动校验 超时级联控制 自动缓存控制 链路跟踪、统计报警等 高并发支撑，稳定保障了疫情期间每天的流量洪峰 如下图，我们从多个层面保障了整体服务的高可用： 觉得不错的话，别忘 star 👏 4. Installation 在项目目录下通过如下命令安装： GO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/tal-tech/go-zero 5. Quick Start 完整示例请查看 快速构建高并发微服务 快速构建高并发微服务 - 多 RPC 版 安装 goctl 工具 goctl 读作 go control，不要读成 go C-T-L。goctl 的意思是不要被代码控制，而是要去控制它。其中的 go 不是指 golang。在设计 goctl 之初，我就希望通过 她 来解放我们的双手👈 GO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/tal-tech/go-zero/tools/goctl 确保 goctl 可执行 快速生成 api 服务 goctl api new greet cd greet go mod init go mod tidy go run greet.go -f etc/greet-api.yaml 默认侦听在 8888 端口（可以在配置文件里修改），可以通过 curl 请求： curl -i http://localhost:8888/from/you 返回如下： HTTP/1.1 200 OK Content-Type: application/json Date: Thu, 22 Oct 2020 14:03:18 GMT Content-Length: 14 {\"message\":\"\"} 编写业务代码： api 文件定义了服务对外暴露的路由，可参考 api 规范 可以在 servicecontext.go 里面传递依赖给 logic，比如 mysql, redis 等 在 api 定义的 get/post/put/delete 等请求对应的 logic 里增加业务处理逻辑 可以根据 api 文件生成前端需要的 Java, TypeScript, Dart, JavaScript 代码 goctl api java -api greet.api -dir greet goctl api dart -api greet.api -dir greet ... 6. Benchmark 测试代码见这里 7. 文档 API 文档 https://www.yuque.com/tal-tech/go-zero awesome 系列（更多文章见『微服务实践』公众号） 快速构建高并发微服务 快速构建高并发微服务 - 多 RPC 版 goctl 使用帮助 精选 goctl 插件 插件 用途 goctl-swagger 一键生成 api 的 swagger 文档 goctl-android 生成 java (android) 端 http client 请求代码 goctl-go-compact 合并 api 里同一个 group 里的 handler 到一个 go 文件 8. 微信公众号 go-zero 相关文章都会在 微服务实践 公众号整理呈现，欢迎扫码关注，也可以通过公众号私信我 👏 9. 微信交流群 如果文档中未能覆盖的任何疑问，欢迎您在群里提出，我们会尽快答复。 您可以在群内提出使用中需要改进的地方，我们会考虑合理性并尽快修改。 如果您发现 bug 请及时提 issue，我们会尽快确认并修改。 为了防止广告用户、识别技术同行，请 star 后加我时注明 github 当前 star 数，我再拉进 go-zero 群，感谢！ 加我之前有劳点一下 star，一个小小的 star 是作者们回答海量问题的动力🤝 项目地址：https://github.com/tal-tech/go-zero 码云地址：https://gitee.com/kevwan/go-zero (国内用户可访问gitee，每日自动从github同步代码) Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 23:18:53 "},"about-us.html":{"url":"about-us.html","title":"关于我们","keywords":"","body":"关于我们 go-zero go-zero 是一个集成了各种工程实践的 web 和 rpc 框架。通过弹性设计保障了大并发服务端的稳定性，经受了充分的实战检验。 go-zero 包含极简的 API 定义和生成工具 goctl，可以根据定义的 api 文件一键生成 Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript 代码，并可直接运行。 go-zero作者 万俊峰，晓黑板研发负责人，好未来资深技术专家，拥有14年研发团队管理经验，16年架构设计经验，20年工程实战经验，负责过多个大型项目的架构设计，曾多次合伙创业（被收购），GopherChina大会讲师，腾讯云开发者大会讲师。 go-zero成员 go-zero截止2021年2月，目前拥有30人的团队开发人员及50+的社区成员。 go-zero社区 我们目前拥有3000多人的社区成员，在这里，你可以和大家讨论任何关于go-zero的技术，问题反馈，获取最新的go-zero信息，以及各位大佬每天分享的技术心得。 go-zero社区群 Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-07 11:19:24 "},"join-us.html":{"url":"join-us.html","title":"加入我们","keywords":"","body":"加入我们 概要 go-zero 是一个基于MIT License 的开源项目，大家在使用中发现bug，有新的特性等，均可以参与到go-zero的贡献中来，我们非常欢迎大家的积极参与，也会最快响应大家提出的各种问题，pr等。 贡献形式 Pull Request Issue 贡献须知 go-zero 的Pull request中的代码需要满足一定规范 命名规范，请阅读命名规范 以英文注释为主 pr时备注好功能特性，描述需要清晰，简洁 增加单元测试覆盖率达80%+ 贡献代码（pr） 进入go-zero 项目，fork一份go-zero 项目到自己的github仓库中。 回到自己的github主页，找到xx/go-zero项目，其中xx为你的用户名，如anqiansong/go-zero 克隆代码到本地 开发代码，push到自己的github仓库 进入自己的github中go-zero项目，点击浮层上的的【Pull requests】进入Compare页面。 base repository选择tal-tech/go-zero base:master,head repository选择xx/go-zero compare:$branch ，$branch为你开发的分支，如图： 点击【Create pull request】即可实现pr申请 确认pr是否提交成功，进入go-zero 的Pull requests 查看，应该有自己提交的记录，名称为你的开发时的分支名称 Issue 在我们的社区中，有很多伙伴会积极的反馈一些go-zero使用过程中遇到的问题，由于社区人数较多，我们虽然会实时的关注社区动态，但大家问题反馈过来都是随机的，当我们团队还在解决某一个伙伴提出的问题时，另外的问题也反馈上来，可能会导致团队会很容易忽略掉，为了能够一一的解决大家的问题，我们强烈建议大家通过issue的方式来反馈问题，包括但不限于bug，期望的新功能特性等，我们在实现某一个新特性时也会在issue中体现，大家在这里也能够在这里获取到go-zero的最新动向，也欢迎大家来积极的参与讨论。 怎么提Issue 点击这里 进入go-zero的Issue页面或者直接访问https://github.com/tal-tech/go-zero/issues 地址 点击右上角的【New issue】新建issue 填写issue标题和内容 点击【Submit new issue】提交issue 参考文档 Pull request Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 15:14:18 "},"concept-introduction.html":{"url":"concept-introduction.html","title":"概念介绍","keywords":"","body":"概念介绍 go-zero 晓黑板golang开源项目，集各种工程实践于一身的web和rpc框架。 goctl 一个旨在为开发人员提高工程效率、降低出错率的辅助工具。 goctl插件 指以goctl为中心的周边二进制资源，能够满足一些个性化的代码生成需求，如路由合并插件goctl-go-compact插件， 生成swagger文档的goctl-swagger插件，生成php调用端的goctl-php插件等。 intellij/vscode插件 在intellij系列产品上配合goctl开发的插件，其将goctl命令行操作使用UI进行替代。 api文件 api文件是指用于定义和描述api服务的文本文件，其以.api后缀结尾，包含api语法描述内容。 goctl环境 goctl环境是使用goctl前的准备环境，包含 golang环境 protoc protoc-gen-go插件 go module | gopath go-zero-demo go-zero-demo里面包含了文档中所有源码的一个大仓库，后续我们在编写演示demo时，我们均在此项目下创建子项目， 因此我们需要提前创建一个大仓库go-zero-demo，我这里把这个仓库放在home目录下。 $ cd ~ $ mkdir go-zero-demo&&cd go-zero-demo $ go mod init go-zero-demo 参考文档 go-zero Goctl 插件中心 工具中心 api语法 Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-07 12:07:00 "},"quick-start.html":{"url":"quick-start.html","title":"快速开发","keywords":"","body":"快速开发 本节主要通过对api/rpc等服务快速开始来让大家对使用go-zero开发的工程有一个宏观概念， 对于更加详细的介绍我们将在后续一一展开，本节将包含一下小节： 单体服务 微服务 Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 23:27:45 "},"monolithic-service.html":{"url":"monolithic-service.html","title":"单体服务","keywords":"","body":"单体服务 前言 由于go-zero集成了web/rpc于一体，社区有部分小伙伴会问我，go-zero的定位是否是一款微服务框架， 答案是否定的，go-zero虽然集众多功能于一身，但你可以将其中任何一个功能独立出来去单独使用，也可以开发单体服务， 不是说每个服务上来就一定要采用微服务的架构的设计，这点大家可以看看作者(kevin)的第四期开源说 ，其中对此有详细的讲解。 创建greet服务 $ cd ~/go-zero-demo $ goctl api new greet Done. 查看一下greet服务的结构 $ cd greet $ tree . ├── etc │ └── greet-api.yaml ├── go.mod ├── greet.api ├── greet.go └── internal ├── config │ └── config.go ├── handler │ ├── greethandler.go │ └── routes.go ├── logic │ └── greetlogic.go ├── svc │ └── servicecontext.go └── types └── types.go 由以上目录结构可以观察到，greet服务虽小，但\"五脏俱全\"。接下来我们就可以在greetlogic.go中编写业务代码了。 编写逻辑 $ vim ~/go-zero-demo/greet/internal/logic/greetlogic.go func (l *GreetLogic) Greet(req types.Request) (*types.Response, error) { return &types.Response{ Message: \"Hello go-zero\", }, nil } 启动并访问服务 启动服务 $ cd ~/go-zer-demo/greet $ go run greet.go -f etc/greet-api.yaml Starting server at 0.0.0.0:8888... 访问服务 $ curl -i -X GET \\ http://localhost:8888/from/you ```text HTTP/1.1 200 OK Content-Type: application/json Date: Sun, 07 Feb 2021 04:31:25 GMT Content-Length: 27 {\"message\":\"Hello go-zero\"} ``` 源码 greet源码 猜你想看 goctl使用说明 api目录结构介绍 api语法 api配置文件介绍 api中间件使用 Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-07 12:40:59 "},"micro-service.html":{"url":"micro-service.html","title":"微服务","keywords":"","body":"微服务 在上一篇我们已经演示了怎样快速创建一个单体服务，接下来我们来演示一下如何快速创建微服务， 在本小节中，api部分其实和单体服务的创建逻辑是一样的，只是在单体服务中没有服务间的通讯而已， 且微服务中api服务会多一些rpc调用的配置。 前言 本小节将以一个订单服务调用用户服务来简单演示一下，演示代码仅传递思路，其中有些环节不会一一列举。 情景提要 假设我们在开发一个商城项目，而开发者小明负责用户模块(user)和订单模块(order)的开发，我们姑且将这两个模块拆分成两个微服务① [!NOTE] ①：微服务的拆分也是一门学问，这里我们就不讨论怎么去拆分微服务的细节了。 演示功能目标 订单服务(order)提供一个查询接口 用户服务(user)提供一个方法供订单服务获取用户信息 服务设计分析 根据情景提要我们可以得知，订单是直接面向用户，通过http协议访问数据，而订单内部需要获取用户的一些基础数据，既然我们的服务是采用微服务的架构设计， 那么两个服务（user,order）就必须要进行数据交换，服务间的数据交换即服务间的通讯，到了这里，采用合理的通讯协议也是一个开发人员需要 考虑的事情，可以通过http，rpc等方式来进行通讯，这里我们选择rpc来实现服务间的通讯，相信这里我已经对\"rpc服务存在有什么作用？\"已经作了一个比较好的场景描述。 当然，一个服务开发前远不止这点设计分析，我们这里就不详细描述了。从上文得知，我们需要一个 user rpc order api 两个服务来初步实现这个小demo。 创建mall工程 $ cd ~/go-zero-demo $ mkdir mall && cd mall 创建user rpc服务 创建user rpc服务 $ cd ~/go-zero-demo/mall $ mkdir -p user/rpc&&cd user/rpc 添加user.proto文件，增加getUser方法 $ vim ~/go-zero-demo/mall/user/user.proto syntax = \"proto3\"; package user; message IdRequest { string id = 1; } message UserResponse { // 用户id string id = 1; // 用户名称 string name = 2; // 用户性别 string gender = 3; } service User { rpc getUser(IdRequest) returns(UserResponse); } 生成代码 $ cd ~/go-zero-demo/mall/user/rpc $ goctl rpc proto -src user.proto -dir . protoc -I=/Users/xx/mall/user user.proto --go_out=plugins=grpc:/Users/xx/mall/user/user Done. 填充业务逻辑 $ vim vi internal/logic/getuserlogic.go package logic import ( \"context\" \"go-zero-demo/mall/user/internal/svc\" \"go-zero-demo/mall/user/user\" \"github.com/tal-tech/go-zero/core/logx\" ) type GetUserLogic struct { ctx context.Context svcCtx *svc.ServiceContext logx.Logger } func NewGetUserLogic(ctx context.Context, svcCtx *svc.ServiceContext) *GetUserLogic { return &GetUserLogic{ ctx: ctx, svcCtx: svcCtx, Logger: logx.WithContext(ctx), } } func (l *GetUserLogic) GetUser(in *user.IdRequest) (*user.UserResponse, error) { return &user.UserResponse{ Id: \"1\", Name: \"test\", }, nil } 创建order api服务 创建 order api服务 $ cd ~/go-zero-demo/mall $ mkdir -p order/api&&cd order/api 添加api文件 $ vim order.api type( OrderReq { Id string `path:\"id\"` } OrderReply { Id string `json:\"id\"` Name string `json:\"name\"` } ) service order { @handler getOrder get /api/order/get/:id (OrderReq) returns (OrderReply) } 生成order服务 $ goctl api go -api order.api -dir . Done. 添加user rpc配置 $ vim internal/config/config.go package config import \"github.com/tal-tech/go-zero/rest\" import \"github.com/tal-tech/go-zero/zrpc\" type Config struct { rest.RestConf UserRpc zrpc.RpcClientConf } 添加yaml配置 $ vim etc/order.yaml Name: order Host: 0.0.0.0 Port: 8888 UserRpc: Etcd: Hosts: - 127.0.0.1:2379 Key: user.rpc 完善服务依赖 $ vim internal/svc/servicecontext.go package svc import ( \"go-zero-demo/mall/order/api/internal/config\" \"go-zero-demo/mall/user/rpc/userclient\" \"github.com/tal-tech/go-zero/zrpc\" ) type ServiceContext struct { Config config.Config UserRpc userclient.User } func NewServiceContext(c config.Config) *ServiceContext { return &ServiceContext{ Config: c, UserRpc: userclient.NewUser(zrpc.MustNewClient(c.UserRpc)), } } 添加order演示逻辑 给getorderlogic添加业务逻辑 $ vim ~/go-zero-demo/mall/order/api/internal/logic/getorderlogic.go user, err := l.svcCtx.UserRpc.GetUser(l.ctx, &userclient.IdRequest{ Id: \"1\", }) if err != nil { return nil, err } if user.Name != \"test\" { return nil, errors.New(\"用户不存在\") } return &types.OrderReply{ Id: req.Id, Name: \"test order\", }, nil 启动服务并验证 启动etcd$ etcd 启动user rpc$ go run user.go -f etc/user.yaml Starting rpc server at 127.0.0.1:8080... [!TIP] 如果启动报类似not enough arguments in call to base.NewBalancerBuilder的错误，请查阅常见错误处理 启动order api$ go run order.go -f etc/order.yaml Starting server at 0.0.0.0:8888... 访问order api curl -i -X GET \\ http://localhost:8888/api/order/get/1 HTTP/1.1 200 OK Content-Type: application/json Date: Sun, 07 Feb 2021 03:45:05 GMT Content-Length: 30 {\"id\":\"1\",\"name\":\"test order\"} [!TIP] 在演示中的提及的api语法，rpc生成，goctl，goctl环境等怎么使用和安装，快速入门中不作详细概述，我们后续都会有详细的文档进行描述，你也可以点击下文的【猜你想看】快速跳转的对应文档查看。 源码 mall源码 猜你想看 goctl使用说明 api目录结构介绍 api语法 api配置文件介绍 api中间件使用 rpc目录 rpc配置 rpc调用方说明 Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-07 12:40:59 "},"framework-design.html":{"url":"framework-design.html","title":"框架设计","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:46:25 "},"api-grammar.html":{"url":"api-grammar.html","title":"api语法介绍","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:46:32 "},"api-dir.html":{"url":"api-dir.html","title":"api目录结构","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:46:38 "},"rpc-dir.html":{"url":"rpc-dir.html","title":"rpc目录结构","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:46:45 "},"project-dev.html":{"url":"project-dev.html","title":"项目开发","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:46:54 "},"prepare.html":{"url":"prepare.html","title":"准备工作","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:47:02 "},"golang-install.html":{"url":"golang-install.html","title":"golang安装","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:47:10 "},"goctl-install.html":{"url":"goctl-install.html","title":"goctl安装","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:47:16 "},"protoc-install.html":{"url":"protoc-install.html","title":"protoc&protoc-gen-go安装","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:47:23 "},"gomod-config.html":{"url":"gomod-config.html","title":"go mod配置","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:47:29 "},"dev-specification.html":{"url":"dev-specification.html","title":"开发规范","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:47:40 "},"naming-spec.html":{"url":"naming-spec.html","title":"命名规范","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:47:47 "},"route-naming-spec.html":{"url":"route-naming-spec.html","title":"路由规范","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:47:54 "},"coding-spec.html":{"url":"coding-spec.html","title":"编码规范","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:48:01 "},"dev-flow.html":{"url":"dev-flow.html","title":"开发流程","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:48:09 "},"config-introduction.html":{"url":"config-introduction.html","title":"配置介绍","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:48:17 "},"api-config.html":{"url":"api-config.html","title":"api配置","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:48:25 "},"rpc-config.html":{"url":"rpc-config.html","title":"rpc配置","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:48:32 "},"business-dev.html":{"url":"business-dev.html","title":"业务开发","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:48:40 "},"jwt.html":{"url":"jwt.html","title":"jwt鉴权","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:48:46 "},"middleware.html":{"url":"middleware.html","title":"中间件使用","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:48:53 "},"model-gen.html":{"url":"model-gen.html","title":"model生成","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:49:00 "},"rpc-call.html":{"url":"rpc-call.html","title":"rpc调用","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:49:07 "},"business-coding.html":{"url":"business-coding.html","title":"业务编码","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:49:14 "},"error-handle.html":{"url":"error-handle.html","title":"错误处理","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:49:21 "},"service-start.html":{"url":"service-start.html","title":"服务启动","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:49:27 "},"ci-cd.html":{"url":"ci-cd.html","title":"CI/CD","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:49:35 "},"service-deployment.html":{"url":"service-deployment.html","title":"服务部署","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:49:55 "},"log-collection.html":{"url":"log-collection.html","title":"日志收集","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:01 "},"service-monitor.html":{"url":"service-monitor.html","title":"服务监控","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:07 "},"goctl.html":{"url":"goctl.html","title":"Goctl","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:13 "},"component-center.html":{"url":"component-center.html","title":"组件中心","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:19 "},"tool-center.html":{"url":"tool-center.html","title":"工具中心","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:25 "},"intellij.html":{"url":"intellij.html","title":"intellij插件","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:31 "},"vscode.html":{"url":"vscode.html","title":"vscode插件","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:37 "},"plugin-center.html":{"url":"plugin-center.html","title":"插件中心","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:44 "},"learning-resource.html":{"url":"learning-resource.html","title":"学习资源","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:50 "},"wechat.html":{"url":"wechat.html","title":"公众号","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:50:57 "},"goreading.html":{"url":"goreading.html","title":"Go夜读","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:51:03 "},"gotalk.html":{"url":"gotalk.html","title":"Go开源说","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:51:09 "},"dev-log.html":{"url":"dev-log.html","title":"开发日志","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:51:16 "},"goctl-log.html":{"url":"goctl-log.html","title":"goctl开发日志","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:51:22 "},"intellij-log.html":{"url":"intellij-log.html","title":"intellij开发日志","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-05 09:51:28 "},"contributor.html":{"url":"contributor.html","title":"社区贡献","keywords":"","body":"社区贡献 作者 kevwan 参与人员(排名不分先后) kingxt anqiansong StevenZack miaogaolin bittoy zhoushuguang Code-Fight xiaowei520 codingfanlt sjatsh knight0zh mywaystay zjbztianya liuximu Alex1996a masonchen2014 YjLeo rcyw voidint wenj91 TonoT foyon defp HappyUncle benyingY cuisongliu yangwenmai weibobo dylanNew WangLeonard Janetyu Jancd microyahoo jiangbohhh chrislee87 supermario1990 ivalue2333 changkun HarryWang29 windk Howie59 wuqinqiang Hkesd almas1992 shenbaise9527 mlboy jichangyun linyihai wwek 注：以上贡献人员为go-zero项目，最后更新于2021年2月5日 Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-07 10:28:44 "},"error.html":{"url":"error.html","title":"常见错误处理","keywords":"","body":"Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-07 11:38:49 "},"source.html":{"url":"source.html","title":"相关源码","keywords":"","body":"相关源码 demo源码 Copyright © 2019-2021 go-zero all right reserved，powered by Gitbook最后更新时间： 2021-02-07 12:40:04 "}}